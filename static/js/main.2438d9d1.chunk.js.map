{"version":3,"sources":["arrow.svg","context/navState.js","components/NavBar/HamburgerButton.js","components/NavBar/SideMenu.js","components/NavBar/Nav.js","hooks/onClickOutside.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuContext","createContext","isMenuOpen","toggleMenu","NavState","children","useState","Provider","value","toggleMenuMode","MenuButton","styled","button","Bar","span","HamburgerButton","useContext","className","aria-label","onClick","Menu","nav","props","open","css","MenuLink","a","arrow","SideMenu","defaultProps","href","Navbar","div","Nav","ref","handler","node","useRef","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","Main","StyledCol","Col","Container","Row","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,sQCGrCC,EAAcC,wBAAc,CAChCC,YAAY,EACZC,WAAY,eAGRC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACEC,oBAAS,GADX,mBACzBJ,EADyB,KACbC,EADa,KAOjC,OACA,kBAACH,EAAYO,SAAb,CAAsBC,MAAO,CAAEN,aAAYO,eAL3C,WACEN,GAAYD,MAKVG,I,6hCCZN,IAAMK,EAAaC,IAAOC,OAAV,KA2CVC,EAAMF,IAAOG,KAAV,KAQHC,EAAkB,WAAO,IAAD,EACWC,qBAAWhB,GAA1CE,EADoB,EACpBA,WAAYO,EADQ,EACRA,eAKpB,OACE,kBAACC,EAAD,CACEO,UAAYf,EAAa,SAAW,GACpCgB,aAAW,iHACXC,QAPiB,WACnBV,MAQE,kBAACI,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,Q,spCC/DN,IAAMO,EAAOT,IAAOU,IAAV,IAiBN,SAAAC,GAAK,OACLA,EAAMC,MAAQC,YAAd,OAKEC,EAAWd,IAAOe,EAAV,IASYC,KAgBpBC,EAAW,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SACVH,EAAec,qBAAWhB,GAA1BE,WACR,OACA,kBAACkB,EAAD,CAAMG,KAAMrB,GACTG,I,qgBASLuB,EAASC,aAAe,CACtBxB,SACE,oCACE,kBAACoB,EAAD,CAAUK,KAAK,KAAf,8CACA,kBAACL,EAAD,CAAUK,KAAK,aAAf,wCACA,kBAACL,EAAD,CAAUK,KAAK,UAAf,yCACA,kBAACL,EAAD,CAAUK,KAAK,YAAf,gDClEN,IAAMC,EAASpB,IAAOqB,IAAV,KAqBNC,EAAM,WACV,IC5ByBC,EAAKC,ED4BxBC,EAAOC,mBADG,EAEuBrB,qBAAWhB,GAA1CE,EAFQ,EAERA,WAAYO,EAFJ,EAEIA,eAQpB,OCrCyByB,ED8BPE,EC9BYD,ED8BN,WAElBjC,GACFO,KChCJ6B,oBAAU,WACR,IAAMC,EAAW,SAAAC,GACVN,EAAIO,UAAWP,EAAIO,QAAQC,SAASF,EAAMG,SAG/CR,EAAQK,IAGV,OADAI,SAASC,iBAAiB,YAAaN,GAChC,WACLK,SAASE,oBAAoB,YAAaP,KAE3C,CAACL,EAAKC,ID0BP,4BAAQD,IAAKE,GACX,kBAACL,EAAD,KACE,kBAAC,EAAD,MACA,mCAEF,kBAAC,EAAD,Q,wGErCC,SAASgB,IACd,IAAMC,EAAYrC,YAAOsC,IAAPtC,CAAH,KAIf,OACE,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,U,ICAGI,E,iLAVX,OACE,yBAAKnC,UAAU,OACb,kBAAC8B,EAAD,MACA,gD,GANUM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2438d9d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.263b68b1.svg\";","import React, { createContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MenuContext = createContext({\r\n  isMenuOpen: false,\r\n  toggleMenu: () => {}\r\n})\r\n\r\nconst NavState = ({ children }) => {\r\n  const [ isMenuOpen, toggleMenu ] = useState(false);\r\n\r\n  function toggleMenuMode() {\r\n    toggleMenu(!isMenuOpen);\r\n  }\r\n\r\n  return (\r\n  <MenuContext.Provider value={{ isMenuOpen, toggleMenuMode }}>\r\n    { children }\r\n  </MenuContext.Provider>\r\n  )\r\n}\r\n\r\nNavState.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\nexport  { NavState, MenuContext };\r\n\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { MenuContext } from '../../context/navState';\r\n\r\nconst MenuButton = styled.button`\r\n  display: block;\r\n  transform-origin: 16px 11px;\r\n  float: left;\r\n  margin-right: 29px;\r\n  outline: 0;\r\n  border: 0;\r\n  padding: 12px;\r\n  background: none;\r\n\r\n  span {\r\n    transition: all 0.3s ;\r\n  }\r\n  :focus {\r\n    border: medium none rgb(111, 255, 176);\r\n    box-shadow: (111, 255, 176) 0 0 2px 2px;\r\n    outline: 0; \r\n  }\r\n  :hover {\r\n    span:nth-of-type(1) {\r\n      width: 33px;\r\n    }\r\n    span:nth-of-type(2) {\r\n      width: 40px;\r\n    }\r\n    span:nth-of-type(3) {\r\n      width: 30px; \r\n    }\r\n  }\r\n  &.active {\r\n    span:nth-of-type(1) {\r\n      transform: rotate(45deg) translate(10px, 10px);\r\n      width: 40px; \r\n    }\r\n    span:nth-of-type(2) {\r\n      opacity: 0;\r\n      pointer-events: none; \r\n    }\r\n    span:nth-of-type(3) {\r\n      transform: rotate(-45deg) translate(7px, -7px);\r\n    }\r\n  }\r\n`;\r\nconst Bar = styled.span`\r\n  display: block;\r\n  width: 40px;\r\n  height: 5px;\r\n  margin-bottom: 7px;\r\n  background-color: #ddd;\r\n`;\r\n\r\nconst HamburgerButton = () => {\r\n  const { isMenuOpen, toggleMenuMode } = useContext(MenuContext);\r\n\r\n  const clickHandler = () => {\r\n    toggleMenuMode();\r\n  }\r\n  return (\r\n    <MenuButton \r\n      className={ isMenuOpen ? 'active' : '' }\r\n      aria-label=\"Открыть главное меню\"\r\n      onClick={ clickHandler }\r\n    >\r\n      <Bar />\r\n      <Bar />\r\n      <Bar />  \r\n    </MenuButton>\r\n  )\r\n}\r\n\r\nexport { HamburgerButton };\r\n\r\n\r\n\r\n\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { MenuContext } from '../../context/navState';\r\nimport arrow from '../../arrow.svg';\r\n\r\nconst Menu = styled.nav`\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  bottom: 0px;\r\n  z-index: 293;\r\n  display: block;\r\n  width: 400px;\r\n  max-width: 100%;\r\n  margin-top: 0px;\r\n  padding-top: 100px;\r\n  padding-right: 0px;\r\n  align-items: stretch;\r\n  background-color: #ccc;\r\n  transform: translateX(-100%);\r\n  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\r\n   \r\n  ${props =>\r\n    props.open && css`\r\n      transform: translateX(0);\r\n    `}\r\n`;\r\n\r\nconst MenuLink = styled.a`\r\n  position: relative;\r\n  display: block;\r\n  text-align: left;\r\n  max-width: 100%;\r\n  padding-top: 25px;\r\n  padding-bottom: 25px;\r\n  padding-left: 16%;\r\n  background-color: #ccc;\r\n  background-image: url(${arrow});\r\n  background-position: 88% 50%;\r\n  background-size: 36px;\r\n  background-repeat: no-repeat;\r\n  transition: background-position 300ms cubic-bezier(0.455, 0.03, 0.515, 0.995);\r\n  text-decoration: none;\r\n  color: #fff;\r\n  font-size: 32px;\r\n  line-height: 110%;\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    background-position: 90% 50%;\r\n  }\r\n`;\r\n\r\nconst SideMenu = ({ children }) => {\r\n  const { isMenuOpen } = useContext(MenuContext);\r\n  return (\r\n  <Menu open={isMenuOpen}>\r\n    {children}\r\n  </Menu>\r\n  );\r\n}\r\n\r\nSideMenu.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nSideMenu.defaultProps = {\r\n  children: (\r\n    <>\r\n      <MenuLink href=\"/\">Главная</MenuLink>\r\n      <MenuLink href=\"/articles\">Статьи</MenuLink>\r\n      <MenuLink href=\"/about\">О сайте</MenuLink>\r\n      <MenuLink href=\"/contact\">Контакт</MenuLink>\r\n    </>\r\n  )\r\n};\r\n\r\nexport { SideMenu, MenuLink };","import React, { useRef, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useOnClickOutside } from '../../hooks/onClickOutside';\r\nimport { MenuContext } from '../../context/navState';\r\nimport { HamburgerButton } from './HamburgerButton';\r\nimport { SideMenu } from './SideMenu';\r\n\r\nconst Navbar = styled.div`\r\n  display: flex;\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  box-sizing: border-box;\r\n  outline: currentcolor none medium;\r\n  max-width: 100%;\r\n  margin: 0px;\r\n  align-items: center;\r\n  background: #aaa none repeat scroll 0% 0%;\r\n  color: rgb(248, 248, 248);\r\n  min-width: 0px;\r\n  min-height: 0px;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  padding: 6px 60px;\r\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 8px 16px;\r\n  z-index: 500;\r\n`;\r\n\r\nconst Nav = () => {\r\n  const node = useRef();\r\n  const { isMenuOpen, toggleMenuMode } = useContext(MenuContext);\r\n  useOnClickOutside(node, () => {\r\n    // Only if menu is open\r\n    if (isMenuOpen) {\r\n      toggleMenuMode();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <header ref={node}>\r\n      <Navbar>\r\n        <HamburgerButton />\r\n        <h1>Hy</h1>\r\n      </Navbar>\r\n      <SideMenu />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport { Nav };\r\n\r\n","import { useEffect } from 'react';\r\n\r\nconst useOnClickOutside = (ref, handler) => {\r\n  useEffect(() => {\r\n    const listener = event => {\r\n      if (!ref.current || ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n      handler(event);\r\n    };\r\n    document.addEventListener('mousedown', listener);\r\n    return () => {\r\n      document.removeEventListener('mousedown', listener);\r\n    };\r\n  }, [ref, handler]);\r\n};\r\n\r\nexport { useOnClickOutside };","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport { Nav } from '../NavBar/Nav';\r\nimport { NavState } from '../../context/navState';\r\n// import { HamburgerButton } from '../NavBar/HamburgerButton';\r\n\r\nexport function Main() {\r\n  const StyledCol = styled(Col)`\r\n    background-color: silver;\r\n  `;\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <StyledCol>\r\n          <NavState>\r\n            <Nav />\r\n          </NavState>\r\n        </StyledCol>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}","import React from 'react';\r\n\r\nimport './App.css';\r\nimport { Main } from './components/Main/Main';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Main />\r\n        <h1>hello world</h1>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}